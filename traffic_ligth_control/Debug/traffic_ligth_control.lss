
traffic_ligth_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800060  00800060  00000a2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b0d  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7b  00000000  00000000  0000272d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000115b  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00004404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c2  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5f  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005fa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 38       	cpi	r26, 0x83	; 131
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  74:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:

void app_init(void)
{
	// sei();
	// SET_BIT(GIFR , INTF0);
	SET_BIT(GICR , INT0);
  7c:	8b b7       	in	r24, 0x3b	; 59
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8b bf       	out	0x3b, r24	; 59
	LED car_green = { CAR_PORT , CAR_GREEN_PIN };
	LED car_yellow = { CAR_PORT , CAR_YELLOW_PIN};
  82:	81 e0       	ldi	r24, 0x01	; 1
	LED car_red = { CAR_PORT , CAR_RED_PIN};
  84:	92 e0       	ldi	r25, 0x02	; 2
	LED pedestrain_green = { PEDESTRAIN_PORT , PEDESTRAIN_GREEN_PIN };
	LED pedestrain_yellow = { PEDESTRAIN_PORT , PEDESTRAIN_YELLOW_PIN};
	LED pedestrain_red = { PEDESTRAIN_PORT , PEDESTRAIN_RED_PIN};
	
	cars_traffic_light.green = car_green;
  86:	eb e7       	ldi	r30, 0x7B	; 123
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	10 82       	st	Z, r1
  8c:	11 82       	std	Z+1, r1	; 0x01
	cars_traffic_light.yellow = car_yellow;
  8e:	12 82       	std	Z+2, r1	; 0x02
  90:	83 83       	std	Z+3, r24	; 0x03
	cars_traffic_light.red = car_red;
  92:	14 82       	std	Z+4, r1	; 0x04
  94:	95 83       	std	Z+5, r25	; 0x05
	
	pedestrains_traffic_light.green = pedestrain_green;
  96:	e3 e7       	ldi	r30, 0x73	; 115
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 83       	st	Z, r24
  9c:	11 82       	std	Z+1, r1	; 0x01
	pedestrains_traffic_light.yellow = pedestrain_yellow;
  9e:	82 83       	std	Z+2, r24	; 0x02
  a0:	83 83       	std	Z+3, r24	; 0x03
	pedestrains_traffic_light.red = pedestrain_red;
  a2:	84 83       	std	Z+4, r24	; 0x04
  a4:	95 83       	std	Z+5, r25	; 0x05
	
	
	
	traffic_light_init(&cars_traffic_light);
  a6:	8b e7       	ldi	r24, 0x7B	; 123
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 9a 00 	call	0x134	; 0x134 <traffic_light_init>
	traffic_light_init(&pedestrains_traffic_light);
  ae:	83 e7       	ldi	r24, 0x73	; 115
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 9a 00 	call	0x134	; 0x134 <traffic_light_init>
	
	Timer0_with_interrupt_initialization(TIMER0_Normal , PIN_Disconnected);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 9c 03 	call	0x738	; 0x738 <Timer0_with_interrupt_initialization>
	Timer0_Start(TIMER0_Prescaler_256);
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	0e 94 30 03 	call	0x660	; 0x660 <Timer0_Start>
	Timer0_with_interrupt_set_delay(TIMER0_Normal , 5000 , 0);
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	48 e8       	ldi	r20, 0x88	; 136
  ca:	53 e1       	ldi	r21, 0x13	; 19
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Timer0_with_interrupt_set_delay>
  d6:	08 95       	ret

000000d8 <app_start>:
}
void app_start(void)
{
  d8:	08 95       	ret

000000da <LED_Initialization>:

#include "LED.h"

void LED_Initialization(LED* led)
{
	DIO_SetPinDirection(led->port , led->pin , DIO_OUTPUT);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	fc 01       	movw	r30, r24
  de:	61 81       	ldd	r22, Z+1	; 0x01
  e0:	80 81       	ld	r24, Z
  e2:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
  e6:	08 95       	ret

000000e8 <LED_On>:
}
void LED_On(LED* led)
{
	DIO_SetPinValue(led->port , led->pin , DIO_HIGH);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	fc 01       	movw	r30, r24
  ec:	61 81       	ldd	r22, Z+1	; 0x01
  ee:	80 81       	ld	r24, Z
  f0:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_SetPinValue>
  f4:	08 95       	ret

000000f6 <LED_Off>:
}
void LED_Off(LED* led)
{
	DIO_SetPinValue(led->port , led->pin , DIO_LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	61 81       	ldd	r22, Z+1	; 0x01
  fc:	80 81       	ld	r24, Z
  fe:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_SetPinValue>
 102:	08 95       	ret

00000104 <LED_Toggle>:
}
void LED_Toggle(LED* led)
{
	DIO_TogglePinValue(led->port , led->pin);
 104:	fc 01       	movw	r30, r24
 106:	61 81       	ldd	r22, Z+1	; 0x01
 108:	80 81       	ld	r24, Z
 10a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_TogglePinValue>
 10e:	08 95       	ret

00000110 <stop>:
	LED_Initialization(&tl->red);
	stop(tl);
}

void stop(traffic_light* tl)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	LED_On(&tl->red);
 116:	04 96       	adiw	r24, 0x04	; 4
 118:	0e 94 74 00 	call	0xe8	; 0xe8 <LED_On>
	LED_Off(&tl->green);
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	LED_Off(&tl->yellow);
 122:	ce 01       	movw	r24, r28
 124:	02 96       	adiw	r24, 0x02	; 2
 126:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	tl->status = traffic_status_red;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8e 83       	std	Y+6, r24	; 0x06
	// tl->previous_status = traffic_status_yellow;
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <traffic_light_init>:
 */ 

#include "traffic_light.h"

void traffic_light_init(traffic_light* tl)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	LED_Initialization(&tl->green);
 13a:	0e 94 6d 00 	call	0xda	; 0xda <LED_Initialization>
	LED_Initialization(&tl->yellow);
 13e:	ce 01       	movw	r24, r28
 140:	02 96       	adiw	r24, 0x02	; 2
 142:	0e 94 6d 00 	call	0xda	; 0xda <LED_Initialization>
	LED_Initialization(&tl->red);
 146:	ce 01       	movw	r24, r28
 148:	04 96       	adiw	r24, 0x04	; 4
 14a:	0e 94 6d 00 	call	0xda	; 0xda <LED_Initialization>
	stop(tl);
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 88 00 	call	0x110	; 0x110 <stop>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <go>:
	LED_Off(&tl->yellow);
	tl->status = traffic_status_red;
	// tl->previous_status = traffic_status_yellow;
}
void go(traffic_light* tl)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
	LED_On(&tl->green);
 160:	0e 94 74 00 	call	0xe8	; 0xe8 <LED_On>
	LED_Off(&tl->red);
 164:	ce 01       	movw	r24, r28
 166:	04 96       	adiw	r24, 0x04	; 4
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	LED_Off(&tl->yellow);
 16c:	ce 01       	movw	r24, r28
 16e:	02 96       	adiw	r24, 0x02	; 2
 170:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	tl->status = traffic_status_green;
 174:	1e 82       	std	Y+6, r1	; 0x06
	// tl->previous_status = traffic_status_red;
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <ready>:
void ready(traffic_light* tl)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	
	if( tl->status == traffic_status_green)
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	81 11       	cpse	r24, r1
 186:	04 c0       	rjmp	.+8      	; 0x190 <ready+0x14>
	{
		LED_On(&tl->green);
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 74 00 	call	0xe8	; 0xe8 <LED_On>
 18e:	03 c0       	rjmp	.+6      	; 0x196 <ready+0x1a>
	}else{
		LED_Off(&tl->green);
 190:	ce 01       	movw	r24, r28
 192:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	}
	
	LED_Off(&tl->yellow);
 196:	ce 01       	movw	r24, r28
 198:	02 96       	adiw	r24, 0x02	; 2
 19a:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	LED_Off(&tl->red);
 19e:	ce 01       	movw	r24, r28
 1a0:	04 96       	adiw	r24, 0x04	; 4
 1a2:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_Off>
	
	tl->previous_status = tl->status;
 1a6:	8e 81       	ldd	r24, Y+6	; 0x06
 1a8:	8f 83       	std	Y+7, r24	; 0x07
	tl->status = traffic_status_yellow;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	8e 83       	std	Y+6, r24	; 0x06
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <next_state>:


void next_state(traffic_light* tl)
{
 1b4:	fc 01       	movw	r30, r24
	if(tl->status == traffic_status_green)
 1b6:	96 81       	ldd	r25, Z+6	; 0x06
 1b8:	91 11       	cpse	r25, r1
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <next_state+0x10>
	{
		ready(tl);
 1bc:	cf 01       	movw	r24, r30
 1be:	0e 94 be 00 	call	0x17c	; 0x17c <ready>
 1c2:	08 95       	ret
	}
	else if(tl->status == traffic_status_yellow)
 1c4:	91 30       	cpi	r25, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <next_state+0x2a>
	{
		if(tl->previous_status == traffic_status_green)
 1c8:	87 81       	ldd	r24, Z+7	; 0x07
 1ca:	81 11       	cpse	r24, r1
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <next_state+0x22>
		{
			stop(tl);	
 1ce:	cf 01       	movw	r24, r30
 1d0:	0e 94 88 00 	call	0x110	; 0x110 <stop>
 1d4:	08 95       	ret
		}
		else{
			go(tl);
 1d6:	cf 01       	movw	r24, r30
 1d8:	0e 94 ad 00 	call	0x15a	; 0x15a <go>
 1dc:	08 95       	ret
		}
		
	}
	else if(tl->status == traffic_status_red)
 1de:	92 30       	cpi	r25, 0x02	; 2
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <next_state+0x34>
	{
		ready(tl);
 1e2:	cf 01       	movw	r24, r30
 1e4:	0e 94 be 00 	call	0x17c	; 0x17c <ready>
 1e8:	08 95       	ret

000001ea <main>:
	Timer0_with_interrupt_initialization(TIMER0_Normal , PIN_Disconnected);
	Timer0_Start(TIMER0_Prescaler_256);
	Timer0_with_interrupt_set_delay(TIMER0_Normal , 5000 , 0);
	*/
	
	app_init();
 1ea:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	
    /* Replace with your application code */
    while (1) 
    {
		app_start();
 1ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <app_start>
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <main+0x4>

000001f4 <__vector_11>:
}




ISR(TIMER0_OVF_vect){
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	
	
	
	// if( (cnt == Number_OVF / 5) || (cnt == Number_OVF * 2 / 5) || (cnt == Number_OVF * 3 / 5) || (cnt == Number_OVF * 4 / 5))
	if( cnt % (Number_OVF/5) ==0 )
 228:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Number_OVF>
 22c:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <Number_OVF+0x1>
 230:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Number_OVF+0x2>
 234:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Number_OVF+0x3>
 238:	2d ec       	ldi	r18, 0xCD	; 205
 23a:	3c ec       	ldi	r19, 0xCC	; 204
 23c:	4c ec       	ldi	r20, 0xCC	; 204
 23e:	5c ec       	ldi	r21, 0xCC	; 204
 240:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__umulsidi3>
 244:	00 e2       	ldi	r16, 0x20	; 32
 246:	0e 94 a6 04 	call	0x94c	; 0x94c <__lshrdi3>
 24a:	82 2e       	mov	r8, r18
 24c:	93 2e       	mov	r9, r19
 24e:	a4 2e       	mov	r10, r20
 250:	b5 2e       	mov	r11, r21
 252:	a5 01       	movw	r20, r10
 254:	94 01       	movw	r18, r8
 256:	56 95       	lsr	r21
 258:	47 95       	ror	r20
 25a:	37 95       	ror	r19
 25c:	27 95       	ror	r18
 25e:	56 95       	lsr	r21
 260:	47 95       	ror	r20
 262:	37 95       	ror	r19
 264:	27 95       	ror	r18
 266:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <cnt>
 26a:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <cnt+0x1>
 26e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt+0x2>
 272:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x3>
 276:	0e 94 4c 04 	call	0x898	; 0x898 <__udivmodsi4>
 27a:	67 2b       	or	r22, r23
 27c:	68 2b       	or	r22, r24
 27e:	69 2b       	or	r22, r25
 280:	81 f4       	brne	.+32     	; 0x2a2 <__vector_11+0xae>
	{

		if(cars_traffic_light.status == traffic_status_yellow)
 282:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <cars_traffic_light+0x6>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	21 f4       	brne	.+8      	; 0x292 <__vector_11+0x9e>
		{
			LED_Toggle(&cars_traffic_light.yellow);
 28a:	8d e7       	ldi	r24, 0x7D	; 125
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 82 00 	call	0x104	; 0x104 <LED_Toggle>
		}
		if(pedestrains_traffic_light.status == traffic_status_yellow)
 292:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <pedestrains_traffic_light+0x6>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	21 f4       	brne	.+8      	; 0x2a2 <__vector_11+0xae>
		{
			LED_Toggle(&pedestrains_traffic_light.yellow);
 29a:	85 e7       	ldi	r24, 0x75	; 117
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 82 00 	call	0x104	; 0x104 <LED_Toggle>
		}

		
	}

	if(cnt==Number_OVF){		//if counter reach number of overflows
 2a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cnt>
 2a6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <cnt+0x1>
 2aa:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <cnt+0x2>
 2ae:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <cnt+0x3>
 2b2:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <Number_OVF>
 2b6:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <Number_OVF+0x1>
 2ba:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <Number_OVF+0x2>
 2be:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <Number_OVF+0x3>
 2c2:	84 17       	cp	r24, r20
 2c4:	95 07       	cpc	r25, r21
 2c6:	a6 07       	cpc	r26, r22
 2c8:	b7 07       	cpc	r27, r23
 2ca:	d9 f4       	brne	.+54     	; 0x302 <__vector_11+0x10e>
		// LED_Toggle(&led1);
		TCNT0 = init_val;
 2cc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <init_val>
 2d0:	82 bf       	out	0x32, r24	; 50
		next_state(&cars_traffic_light);
 2d2:	8b e7       	ldi	r24, 0x7B	; 123
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <next_state>
		
		if(pedestrains_traffic_light.status != traffic_status_red)
 2da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <pedestrains_traffic_light+0x6>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	29 f0       	breq	.+10     	; 0x2ec <__vector_11+0xf8>
		{
			next_state(&pedestrains_traffic_light);
 2e2:	83 e7       	ldi	r24, 0x73	; 115
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <next_state>
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__vector_11+0xfc>
		}
		else
		{
			button_pressed = 0;			
 2ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		cnt=0;					//make  counter =0
 2f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cnt>
 2f4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt+0x1>
 2f8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x2>
 2fc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt+0x3>
 300:	0b c0       	rjmp	.+22     	; 0x318 <__vector_11+0x124>
	}
	else
	{
		cnt++;
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	a1 1d       	adc	r26, r1
 306:	b1 1d       	adc	r27, r1
 308:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cnt>
 30c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <cnt+0x1>
 310:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <cnt+0x2>
 314:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <cnt+0x3>
	}
		
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	df 90       	pop	r13
 338:	cf 90       	pop	r12
 33a:	bf 90       	pop	r11
 33c:	af 90       	pop	r10
 33e:	9f 90       	pop	r9
 340:	8f 90       	pop	r8
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_1>:




ISR(INT0_vect){
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	
	if(cars_traffic_light.status == traffic_status_red && button_pressed == 0)
 36e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <cars_traffic_light+0x6>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	b1 f4       	brne	.+44     	; 0x3a2 <__vector_1+0x56>
 376:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 37a:	91 11       	cpse	r25, r1
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <__vector_1+0x56>
	{
		Timer0_Stop();
 37e:	0e 94 8e 03 	call	0x71c	; 0x71c <Timer0_Stop>
		Timer0_Start(TIMER0_Prescaler_256);
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	0e 94 30 03 	call	0x660	; 0x660 <Timer0_Start>
		cnt = 0;
 388:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cnt>
 38c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt+0x1>
 390:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x2>
 394:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt+0x3>
		go(&pedestrains_traffic_light);
 398:	83 e7       	ldi	r24, 0x73	; 115
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 ad 00 	call	0x15a	; 0x15a <go>
 3a0:	35 c0       	rjmp	.+106    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	}
	else if(cars_traffic_light.status == traffic_status_green && button_pressed == 0)
 3a2:	81 11       	cpse	r24, r1
 3a4:	1a c0       	rjmp	.+52     	; 0x3da <__vector_1+0x8e>
 3a6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3aa:	91 11       	cpse	r25, r1
 3ac:	16 c0       	rjmp	.+44     	; 0x3da <__vector_1+0x8e>
	{
		Timer0_Stop();
 3ae:	0e 94 8e 03 	call	0x71c	; 0x71c <Timer0_Stop>
		Timer0_Start(TIMER0_Prescaler_256);
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	0e 94 30 03 	call	0x660	; 0x660 <Timer0_Start>
		cnt = 0;
 3b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cnt>
 3bc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt+0x1>
 3c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x2>
 3c4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt+0x3>
		next_state(&cars_traffic_light);
 3c8:	8b e7       	ldi	r24, 0x7B	; 123
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <next_state>
		next_state(&pedestrains_traffic_light);
 3d0:	83 e7       	ldi	r24, 0x73	; 115
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <next_state>
 3d8:	19 c0       	rjmp	.+50     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	}
	else if(cars_traffic_light.status == traffic_status_yellow && button_pressed == 0)
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	b9 f4       	brne	.+46     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e2:	81 11       	cpse	r24, r1
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		Timer0_Stop();
 3e6:	0e 94 8e 03 	call	0x71c	; 0x71c <Timer0_Stop>
		Timer0_Start(TIMER0_Prescaler_256);
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	0e 94 30 03 	call	0x660	; 0x660 <Timer0_Start>
		cnt = 0;
 3f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cnt>
 3f4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt+0x1>
 3f8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x2>
 3fc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt+0x3>
		cars_traffic_light.previous_status = traffic_status_green;
 400:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <cars_traffic_light+0x7>
		next_state(&pedestrains_traffic_light);
 404:	83 e7       	ldi	r24, 0x73	; 115
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 da 00 	call	0x1b4	; 0x1b4 <next_state>
	}
	button_pressed = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <DIO_SetPinDirection>:
#include "DIO.h"

// Prototypes for functions pin only
void DIO_SetPinDirection (Port port , Pin pin , State state)
{
	switch(state)
 434:	44 23       	and	r20, r20
 436:	19 f0       	breq	.+6      	; 0x43e <DIO_SetPinDirection+0xa>
 438:	41 30       	cpi	r20, 0x01	; 1
 43a:	c9 f1       	breq	.+114    	; 0x4ae <DIO_SetPinDirection+0x7a>
 43c:	08 95       	ret
	{
		case DIO_INPUT:
			switch(port)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <DIO_SetPinDirection+0x32>
 442:	28 f0       	brcs	.+10     	; 0x44e <DIO_SetPinDirection+0x1a>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	d9 f0       	breq	.+54     	; 0x47e <DIO_SetPinDirection+0x4a>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	29 f1       	breq	.+74     	; 0x496 <DIO_SetPinDirection+0x62>
 44c:	08 95       	ret
			{
				case DIO_PORTA:
					CLEAR_BIT(DDRA , pin);
 44e:	2a b3       	in	r18, 0x1a	; 26
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_SetPinDirection+0x26>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_SetPinDirection+0x22>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	8a bb       	out	0x1a, r24	; 26
					break;
 464:	08 95       	ret
				case DIO_PORTB:
					CLEAR_BIT(DDRB , pin);
 466:	27 b3       	in	r18, 0x17	; 23
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_SetPinDirection+0x3e>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_SetPinDirection+0x3a>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	87 bb       	out	0x17, r24	; 23
					break;
 47c:	08 95       	ret
				case DIO_PORTC:
					CLEAR_BIT(DDRC , pin);
 47e:	24 b3       	in	r18, 0x14	; 20
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_SetPinDirection+0x56>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_SetPinDirection+0x52>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	84 bb       	out	0x14, r24	; 20
					break;
 494:	08 95       	ret
				case DIO_PORTD:
					CLEAR_BIT(DDRD , pin);
 496:	21 b3       	in	r18, 0x11	; 17
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_SetPinDirection+0x6e>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_SetPinDirection+0x6a>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	81 bb       	out	0x11, r24	; 17
					break;
 4ac:	08 95       	ret
					break;
			}
			break;
		
		case DIO_OUTPUT:
			switch(port)
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	89 f0       	breq	.+34     	; 0x4d4 <DIO_SetPinDirection+0xa0>
 4b2:	28 f0       	brcs	.+10     	; 0x4be <DIO_SetPinDirection+0x8a>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	c9 f0       	breq	.+50     	; 0x4ea <DIO_SetPinDirection+0xb6>
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	11 f1       	breq	.+68     	; 0x500 <DIO_SetPinDirection+0xcc>
 4bc:	08 95       	ret
			{
				case DIO_PORTA:
					SET_BIT(DDRA , pin);
 4be:	2a b3       	in	r18, 0x1a	; 26
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_SetPinDirection+0x96>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_SetPinDirection+0x92>
 4ce:	82 2b       	or	r24, r18
 4d0:	8a bb       	out	0x1a, r24	; 26
					break;
 4d2:	08 95       	ret
				case DIO_PORTB:
					SET_BIT(DDRB , pin);
 4d4:	27 b3       	in	r18, 0x17	; 23
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_SetPinDirection+0xac>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_SetPinDirection+0xa8>
 4e4:	82 2b       	or	r24, r18
 4e6:	87 bb       	out	0x17, r24	; 23
					break;
 4e8:	08 95       	ret
				case DIO_PORTC:
					SET_BIT(DDRC , pin);
 4ea:	24 b3       	in	r18, 0x14	; 20
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_SetPinDirection+0xc2>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_SetPinDirection+0xbe>
 4fa:	82 2b       	or	r24, r18
 4fc:	84 bb       	out	0x14, r24	; 20
					break;
 4fe:	08 95       	ret
				case DIO_PORTD:
					SET_BIT(DDRD , pin);
 500:	21 b3       	in	r18, 0x11	; 17
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_SetPinDirection+0xd8>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_SetPinDirection+0xd4>
 510:	82 2b       	or	r24, r18
 512:	81 bb       	out	0x11, r24	; 17
 514:	08 95       	ret

00000516 <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue (Port port , Pin pin , Status status)
{
	switch(status)
 516:	44 23       	and	r20, r20
 518:	19 f0       	breq	.+6      	; 0x520 <DIO_SetPinValue+0xa>
 51a:	41 30       	cpi	r20, 0x01	; 1
 51c:	c9 f1       	breq	.+114    	; 0x590 <DIO_SetPinValue+0x7a>
 51e:	08 95       	ret
	{
		case DIO_LOW:
			switch(port)
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	91 f0       	breq	.+36     	; 0x548 <DIO_SetPinValue+0x32>
 524:	28 f0       	brcs	.+10     	; 0x530 <DIO_SetPinValue+0x1a>
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	d9 f0       	breq	.+54     	; 0x560 <DIO_SetPinValue+0x4a>
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	29 f1       	breq	.+74     	; 0x578 <DIO_SetPinValue+0x62>
 52e:	08 95       	ret
			{
				case DIO_PORTA:
				CLEAR_BIT(PORTA , pin);
 530:	2b b3       	in	r18, 0x1b	; 27
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_SetPinValue+0x26>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_SetPinValue+0x22>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	8b bb       	out	0x1b, r24	; 27
				break;
 546:	08 95       	ret
				case DIO_PORTB:
				CLEAR_BIT(PORTB , pin);
 548:	28 b3       	in	r18, 0x18	; 24
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_SetPinValue+0x3e>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_SetPinValue+0x3a>
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	88 bb       	out	0x18, r24	; 24
				break;
 55e:	08 95       	ret
				case DIO_PORTC:
				CLEAR_BIT(PORTC , pin);
 560:	25 b3       	in	r18, 0x15	; 21
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_SetPinValue+0x56>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_SetPinValue+0x52>
 570:	80 95       	com	r24
 572:	82 23       	and	r24, r18
 574:	85 bb       	out	0x15, r24	; 21
				break;
 576:	08 95       	ret
				case DIO_PORTD:
				CLEAR_BIT(PORTD , pin);
 578:	22 b3       	in	r18, 0x12	; 18
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_SetPinValue+0x6e>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_SetPinValue+0x6a>
 588:	80 95       	com	r24
 58a:	82 23       	and	r24, r18
 58c:	82 bb       	out	0x12, r24	; 18
				break;
 58e:	08 95       	ret
				break;
			}
			break;
		
		case DIO_HIGH:
			switch(port)
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	89 f0       	breq	.+34     	; 0x5b6 <DIO_SetPinValue+0xa0>
 594:	28 f0       	brcs	.+10     	; 0x5a0 <DIO_SetPinValue+0x8a>
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	c9 f0       	breq	.+50     	; 0x5cc <DIO_SetPinValue+0xb6>
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	11 f1       	breq	.+68     	; 0x5e2 <DIO_SetPinValue+0xcc>
 59e:	08 95       	ret
			{
				case DIO_PORTA:
					SET_BIT(PORTA , pin);
 5a0:	2b b3       	in	r18, 0x1b	; 27
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_SetPinValue+0x96>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_SetPinValue+0x92>
 5b0:	82 2b       	or	r24, r18
 5b2:	8b bb       	out	0x1b, r24	; 27
					break;
 5b4:	08 95       	ret
				case DIO_PORTB:
					SET_BIT(PORTB , pin);
 5b6:	28 b3       	in	r18, 0x18	; 24
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_SetPinValue+0xac>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_SetPinValue+0xa8>
 5c6:	82 2b       	or	r24, r18
 5c8:	88 bb       	out	0x18, r24	; 24
					break;
 5ca:	08 95       	ret
				case DIO_PORTC:
					SET_BIT(PORTC , pin);
 5cc:	25 b3       	in	r18, 0x15	; 21
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_SetPinValue+0xc2>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	6a 95       	dec	r22
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_SetPinValue+0xbe>
 5dc:	82 2b       	or	r24, r18
 5de:	85 bb       	out	0x15, r24	; 21
					break;
 5e0:	08 95       	ret
				case DIO_PORTD:
					SET_BIT(PORTD , pin);
 5e2:	22 b3       	in	r18, 0x12	; 18
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_SetPinValue+0xd8>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_SetPinValue+0xd4>
 5f2:	82 2b       	or	r24, r18
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	08 95       	ret

000005f8 <DIO_TogglePinValue>:
	}
	
}
void DIO_TogglePinValue(Port port , Pin pin)
{
	switch(port)
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	89 f0       	breq	.+34     	; 0x61e <DIO_TogglePinValue+0x26>
 5fc:	28 f0       	brcs	.+10     	; 0x608 <DIO_TogglePinValue+0x10>
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	c9 f0       	breq	.+50     	; 0x634 <DIO_TogglePinValue+0x3c>
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	11 f1       	breq	.+68     	; 0x64a <DIO_TogglePinValue+0x52>
 606:	08 95       	ret
	{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA , pin);
 608:	2b b3       	in	r18, 0x1b	; 27
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_TogglePinValue+0x1c>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_TogglePinValue+0x18>
 618:	82 27       	eor	r24, r18
 61a:	8b bb       	out	0x1b, r24	; 27
			break;
 61c:	08 95       	ret
		case DIO_PORTB:
			TOGGLE_BIT(PORTB , pin);
 61e:	28 b3       	in	r18, 0x18	; 24
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_TogglePinValue+0x32>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_TogglePinValue+0x2e>
 62e:	82 27       	eor	r24, r18
 630:	88 bb       	out	0x18, r24	; 24
			break;
 632:	08 95       	ret
		case DIO_PORTC:
			TOGGLE_BIT(PORTC , pin);
 634:	25 b3       	in	r18, 0x15	; 21
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_TogglePinValue+0x48>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_TogglePinValue+0x44>
 644:	82 27       	eor	r24, r18
 646:	85 bb       	out	0x15, r24	; 21
			break;
 648:	08 95       	ret
		case DIO_PORTD:
			TOGGLE_BIT(PORTD , pin);
 64a:	22 b3       	in	r18, 0x12	; 18
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_TogglePinValue+0x5e>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_TogglePinValue+0x5a>
 65a:	82 27       	eor	r24, r18
 65c:	82 bb       	out	0x12, r24	; 18
 65e:	08 95       	ret

00000660 <Timer0_Start>:
			while(GET_BIT(TIFR , OCF0) != 1 );
			counter++;
			SET_BIT(TIFR , OCF0);
		}
	}
}
 660:	83 30       	cpi	r24, 0x03	; 3
 662:	61 f1       	breq	.+88     	; 0x6bc <Timer0_Start+0x5c>
 664:	28 f4       	brcc	.+10     	; 0x670 <Timer0_Start+0x10>
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	49 f0       	breq	.+18     	; 0x67c <Timer0_Start+0x1c>
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	b9 f0       	breq	.+46     	; 0x69c <Timer0_Start+0x3c>
 66e:	08 95       	ret
 670:	84 30       	cpi	r24, 0x04	; 4
 672:	a1 f1       	breq	.+104    	; 0x6dc <Timer0_Start+0x7c>
 674:	85 30       	cpi	r24, 0x05	; 5
 676:	09 f4       	brne	.+2      	; 0x67a <Timer0_Start+0x1a>
 678:	41 c0       	rjmp	.+130    	; 0x6fc <Timer0_Start+0x9c>
 67a:	08 95       	ret
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	8b 7f       	andi	r24, 0xFB	; 251
 680:	83 bf       	out	0x33, r24	; 51
 682:	83 b7       	in	r24, 0x33	; 51
 684:	8d 7f       	andi	r24, 0xFD	; 253
 686:	83 bf       	out	0x33, r24	; 51
 688:	83 b7       	in	r24, 0x33	; 51
 68a:	81 60       	ori	r24, 0x01	; 1
 68c:	83 bf       	out	0x33, r24	; 51
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Global_Prescaler+0x1>
 696:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Global_Prescaler>
 69a:	08 95       	ret
 69c:	83 b7       	in	r24, 0x33	; 51
 69e:	8b 7f       	andi	r24, 0xFB	; 251
 6a0:	83 bf       	out	0x33, r24	; 51
 6a2:	83 b7       	in	r24, 0x33	; 51
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	83 bf       	out	0x33, r24	; 51
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	8e 7f       	andi	r24, 0xFE	; 254
 6ac:	83 bf       	out	0x33, r24	; 51
 6ae:	88 e0       	ldi	r24, 0x08	; 8
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Global_Prescaler+0x1>
 6b6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Global_Prescaler>
 6ba:	08 95       	ret
 6bc:	83 b7       	in	r24, 0x33	; 51
 6be:	8b 7f       	andi	r24, 0xFB	; 251
 6c0:	83 bf       	out	0x33, r24	; 51
 6c2:	83 b7       	in	r24, 0x33	; 51
 6c4:	82 60       	ori	r24, 0x02	; 2
 6c6:	83 bf       	out	0x33, r24	; 51
 6c8:	83 b7       	in	r24, 0x33	; 51
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	83 bf       	out	0x33, r24	; 51
 6ce:	80 e4       	ldi	r24, 0x40	; 64
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Global_Prescaler+0x1>
 6d6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Global_Prescaler>
 6da:	08 95       	ret
 6dc:	83 b7       	in	r24, 0x33	; 51
 6de:	84 60       	ori	r24, 0x04	; 4
 6e0:	83 bf       	out	0x33, r24	; 51
 6e2:	83 b7       	in	r24, 0x33	; 51
 6e4:	8d 7f       	andi	r24, 0xFD	; 253
 6e6:	83 bf       	out	0x33, r24	; 51
 6e8:	83 b7       	in	r24, 0x33	; 51
 6ea:	8e 7f       	andi	r24, 0xFE	; 254
 6ec:	83 bf       	out	0x33, r24	; 51
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Global_Prescaler+0x1>
 6f6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Global_Prescaler>
 6fa:	08 95       	ret
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	84 60       	ori	r24, 0x04	; 4
 700:	83 bf       	out	0x33, r24	; 51
 702:	83 b7       	in	r24, 0x33	; 51
 704:	8d 7f       	andi	r24, 0xFD	; 253
 706:	83 bf       	out	0x33, r24	; 51
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	81 60       	ori	r24, 0x01	; 1
 70c:	83 bf       	out	0x33, r24	; 51
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	94 e0       	ldi	r25, 0x04	; 4
 712:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Global_Prescaler+0x1>
 716:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Global_Prescaler>
 71a:	08 95       	ret

0000071c <Timer0_Stop>:
 71c:	83 b7       	in	r24, 0x33	; 51
 71e:	8b 7f       	andi	r24, 0xFB	; 251
 720:	83 bf       	out	0x33, r24	; 51
 722:	83 b7       	in	r24, 0x33	; 51
 724:	8d 7f       	andi	r24, 0xFD	; 253
 726:	83 bf       	out	0x33, r24	; 51
 728:	83 b7       	in	r24, 0x33	; 51
 72a:	8e 7f       	andi	r24, 0xFE	; 254
 72c:	83 bf       	out	0x33, r24	; 51
 72e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Global_Prescaler+0x1>
 732:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Global_Prescaler>
 736:	08 95       	ret

00000738 <Timer0_with_interrupt_initialization>:
uint32_t Number_CTC = 0;
uint32_t init_val = 0;

void Timer0_with_interrupt_initialization(TIMER0_Mode mode , TIMER0_Pin_Mode pin_mode)
{
	cli();
 738:	f8 94       	cli
	switch(mode)
 73a:	88 23       	and	r24, r24
 73c:	19 f0       	breq	.+6      	; 0x744 <Timer0_with_interrupt_initialization+0xc>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	59 f0       	breq	.+22     	; 0x758 <Timer0_with_interrupt_initialization+0x20>
 742:	13 c0       	rjmp	.+38     	; 0x76a <Timer0_with_interrupt_initialization+0x32>
	{
		case TIMER0_Normal:
			CLEAR_BIT(TCCR0 , WGM01); CLEAR_BIT(TCCR0 , WGM00);
 744:	83 b7       	in	r24, 0x33	; 51
 746:	87 7f       	andi	r24, 0xF7	; 247
 748:	83 bf       	out	0x33, r24	; 51
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	8f 7b       	andi	r24, 0xBF	; 191
 74e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TIMSK , TOIE0);
 750:	89 b7       	in	r24, 0x39	; 57
 752:	81 60       	ori	r24, 0x01	; 1
 754:	89 bf       	out	0x39, r24	; 57
			break;
 756:	09 c0       	rjmp	.+18     	; 0x76a <Timer0_with_interrupt_initialization+0x32>
		case TIMER0_CTC:
			SET_BIT(TCCR0 , WGM01); CLEAR_BIT(TCCR0 , WGM00);
 758:	83 b7       	in	r24, 0x33	; 51
 75a:	88 60       	ori	r24, 0x08	; 8
 75c:	83 bf       	out	0x33, r24	; 51
 75e:	83 b7       	in	r24, 0x33	; 51
 760:	8f 7b       	andi	r24, 0xBF	; 191
 762:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TIMSK , OCIE0);
 764:	89 b7       	in	r24, 0x39	; 57
 766:	82 60       	ori	r24, 0x02	; 2
 768:	89 bf       	out	0x39, r24	; 57
			break;
	}
	
	switch(pin_mode)
 76a:	61 30       	cpi	r22, 0x01	; 1
 76c:	69 f0       	breq	.+26     	; 0x788 <Timer0_with_interrupt_initialization+0x50>
 76e:	28 f0       	brcs	.+10     	; 0x77a <Timer0_with_interrupt_initialization+0x42>
 770:	62 30       	cpi	r22, 0x02	; 2
 772:	89 f0       	breq	.+34     	; 0x796 <Timer0_with_interrupt_initialization+0x5e>
 774:	63 30       	cpi	r22, 0x03	; 3
 776:	b1 f0       	breq	.+44     	; 0x7a4 <Timer0_with_interrupt_initialization+0x6c>
 778:	1b c0       	rjmp	.+54     	; 0x7b0 <Timer0_with_interrupt_initialization+0x78>
	{
		case PIN_Disconnected:
			CLEAR_BIT(TCCR0 , COM01); CLEAR_BIT(TCCR0 , COM00);
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	8f 7d       	andi	r24, 0xDF	; 223
 77e:	83 bf       	out	0x33, r24	; 51
 780:	83 b7       	in	r24, 0x33	; 51
 782:	8f 7e       	andi	r24, 0xEF	; 239
 784:	83 bf       	out	0x33, r24	; 51
			break;
 786:	14 c0       	rjmp	.+40     	; 0x7b0 <Timer0_with_interrupt_initialization+0x78>
		case PIN_Toggle:
			CLEAR_BIT(TCCR0 , COM01); SET_BIT(TCCR0 , COM00);
 788:	83 b7       	in	r24, 0x33	; 51
 78a:	8f 7d       	andi	r24, 0xDF	; 223
 78c:	83 bf       	out	0x33, r24	; 51
 78e:	83 b7       	in	r24, 0x33	; 51
 790:	80 61       	ori	r24, 0x10	; 16
 792:	83 bf       	out	0x33, r24	; 51
			break;
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <Timer0_with_interrupt_initialization+0x78>
		case PIN_Clear:
			SET_BIT(TCCR0 , COM01); CLEAR_BIT(TCCR0 , COM00);
 796:	83 b7       	in	r24, 0x33	; 51
 798:	80 62       	ori	r24, 0x20	; 32
 79a:	83 bf       	out	0x33, r24	; 51
 79c:	83 b7       	in	r24, 0x33	; 51
 79e:	8f 7e       	andi	r24, 0xEF	; 239
 7a0:	83 bf       	out	0x33, r24	; 51
			break;
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <Timer0_with_interrupt_initialization+0x78>
		case PIN_Set:
			SET_BIT(TCCR0 , COM01); SET_BIT(TCCR0 , COM00);
 7a4:	83 b7       	in	r24, 0x33	; 51
 7a6:	80 62       	ori	r24, 0x20	; 32
 7a8:	83 bf       	out	0x33, r24	; 51
 7aa:	83 b7       	in	r24, 0x33	; 51
 7ac:	80 61       	ori	r24, 0x10	; 16
 7ae:	83 bf       	out	0x33, r24	; 51
			break;
		default:
			break;
	}
	sei();
 7b0:	78 94       	sei
 7b2:	08 95       	ret

000007b4 <Timer0_with_interrupt_set_delay>:




void Timer0_with_interrupt_set_delay(TIMER0_Mode mode , uint32_t delay , uint16_t top)
{
 7b4:	cf 92       	push	r12
 7b6:	df 92       	push	r13
 7b8:	ef 92       	push	r14
 7ba:	ff 92       	push	r15
	if(mode == TIMER0_Normal)
 7bc:	81 11       	cpse	r24, r1
 7be:	37 c0       	rjmp	.+110    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		uint32_t tick = (1 * Global_Prescaler) / Frequency;
 7c0:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <Global_Prescaler>
 7c4:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <Global_Prescaler+0x1>
 7c8:	d6 94       	lsr	r13
 7ca:	c7 94       	ror	r12
 7cc:	d6 94       	lsr	r13
 7ce:	c7 94       	ror	r12
 7d0:	d6 94       	lsr	r13
 7d2:	c7 94       	ror	r12
 7d4:	e1 2c       	mov	r14, r1
 7d6:	f1 2c       	mov	r15, r1
		uint32_t Count = (delay * 1000) / tick;
 7d8:	a8 ee       	ldi	r26, 0xE8	; 232
 7da:	b3 e0       	ldi	r27, 0x03	; 3
 7dc:	9a 01       	movw	r18, r20
 7de:	ab 01       	movw	r20, r22
 7e0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__muluhisi3>
 7e4:	a7 01       	movw	r20, r14
 7e6:	96 01       	movw	r18, r12
 7e8:	0e 94 4c 04 	call	0x898	; 0x898 <__udivmodsi4>
		Number_OVF = Count / Bits;
 7ec:	bb 27       	eor	r27, r27
 7ee:	a5 2f       	mov	r26, r21
 7f0:	94 2f       	mov	r25, r20
 7f2:	83 2f       	mov	r24, r19
		Number_OVF++;
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	b1 1d       	adc	r27, r1
 7fa:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Number_OVF>
 7fe:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Number_OVF+0x1>
 802:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <Number_OVF+0x2>
 806:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <Number_OVF+0x3>
		init_val = Bits - (Count % Bits);
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	a0 e0       	ldi	r26, 0x00	; 0
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	82 1b       	sub	r24, r18
 814:	91 09       	sbc	r25, r1
 816:	a1 09       	sbc	r26, r1
 818:	b1 09       	sbc	r27, r1
 81a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <init_val>
 81e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <init_val+0x1>
 822:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <init_val+0x2>
 826:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <init_val+0x3>
		TCNT0 = init_val;
 82a:	82 bf       	out	0x32, r24	; 50
 82c:	30 c0       	rjmp	.+96     	; 0x88e <__stack+0x2f>
	}
	else if(mode == TIMER0_CTC)
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	71 f5       	brne	.+92     	; 0x88e <__stack+0x2f>
	{
		OCR0 = top;
 832:	2c bf       	out	0x3c, r18	; 60
		uint32_t tick = (1 * Global_Prescaler) / Frequency;
 834:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <Global_Prescaler>
 838:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <Global_Prescaler+0x1>
 83c:	d6 94       	lsr	r13
 83e:	c7 94       	ror	r12
 840:	d6 94       	lsr	r13
 842:	c7 94       	ror	r12
 844:	d6 94       	lsr	r13
 846:	c7 94       	ror	r12
 848:	e1 2c       	mov	r14, r1
 84a:	f1 2c       	mov	r15, r1
		uint32_t Count = (delay * 1000) / tick;
 84c:	a8 ee       	ldi	r26, 0xE8	; 232
 84e:	b3 e0       	ldi	r27, 0x03	; 3
 850:	9a 01       	movw	r18, r20
 852:	ab 01       	movw	r20, r22
 854:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__muluhisi3>
 858:	a7 01       	movw	r20, r14
 85a:	96 01       	movw	r18, r12
 85c:	0e 94 4c 04 	call	0x898	; 0x898 <__udivmodsi4>
		Number_CTC = Count / OCR0;
 860:	cc b6       	in	r12, 0x3c	; 60
 862:	d1 2c       	mov	r13, r1
 864:	e1 2c       	mov	r14, r1
 866:	f1 2c       	mov	r15, r1
 868:	ca 01       	movw	r24, r20
 86a:	b9 01       	movw	r22, r18
 86c:	a7 01       	movw	r20, r14
 86e:	96 01       	movw	r18, r12
 870:	0e 94 4c 04 	call	0x898	; 0x898 <__udivmodsi4>
		Number_CTC++;
 874:	da 01       	movw	r26, r20
 876:	c9 01       	movw	r24, r18
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	a1 1d       	adc	r26, r1
 87c:	b1 1d       	adc	r27, r1
 87e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Number_CTC>
 882:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Number_CTC+0x1>
 886:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <Number_CTC+0x2>
 88a:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <Number_CTC+0x3>
	}
}
 88e:	ff 90       	pop	r15
 890:	ef 90       	pop	r14
 892:	df 90       	pop	r13
 894:	cf 90       	pop	r12
 896:	08 95       	ret

00000898 <__udivmodsi4>:
 898:	a1 e2       	ldi	r26, 0x21	; 33
 89a:	1a 2e       	mov	r1, r26
 89c:	aa 1b       	sub	r26, r26
 89e:	bb 1b       	sub	r27, r27
 8a0:	fd 01       	movw	r30, r26
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <__udivmodsi4_ep>

000008a4 <__udivmodsi4_loop>:
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	ee 1f       	adc	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	a2 17       	cp	r26, r18
 8ae:	b3 07       	cpc	r27, r19
 8b0:	e4 07       	cpc	r30, r20
 8b2:	f5 07       	cpc	r31, r21
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__udivmodsi4_ep>
 8b6:	a2 1b       	sub	r26, r18
 8b8:	b3 0b       	sbc	r27, r19
 8ba:	e4 0b       	sbc	r30, r20
 8bc:	f5 0b       	sbc	r31, r21

000008be <__udivmodsi4_ep>:
 8be:	66 1f       	adc	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	1a 94       	dec	r1
 8c8:	69 f7       	brne	.-38     	; 0x8a4 <__udivmodsi4_loop>
 8ca:	60 95       	com	r22
 8cc:	70 95       	com	r23
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	9b 01       	movw	r18, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	bd 01       	movw	r22, r26
 8d8:	cf 01       	movw	r24, r30
 8da:	08 95       	ret

000008dc <__muluhisi3>:
 8dc:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 8e0:	a5 9f       	mul	r26, r21
 8e2:	90 0d       	add	r25, r0
 8e4:	b4 9f       	mul	r27, r20
 8e6:	90 0d       	add	r25, r0
 8e8:	a4 9f       	mul	r26, r20
 8ea:	80 0d       	add	r24, r0
 8ec:	91 1d       	adc	r25, r1
 8ee:	11 24       	eor	r1, r1
 8f0:	08 95       	ret

000008f2 <__umulsidi3>:
 8f2:	e8 94       	clt

000008f4 <__umulsidi3_helper>:
 8f4:	df 93       	push	r29
 8f6:	cf 93       	push	r28
 8f8:	fc 01       	movw	r30, r24
 8fa:	db 01       	movw	r26, r22
 8fc:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 900:	7f 93       	push	r23
 902:	6f 93       	push	r22
 904:	e9 01       	movw	r28, r18
 906:	9a 01       	movw	r18, r20
 908:	ac 01       	movw	r20, r24
 90a:	bf 93       	push	r27
 90c:	af 93       	push	r26
 90e:	3f 93       	push	r19
 910:	2f 93       	push	r18
 912:	df 01       	movw	r26, r30
 914:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 918:	26 f4       	brtc	.+8      	; 0x922 <__umulsidi3_helper+0x2e>
 91a:	6c 1b       	sub	r22, r28
 91c:	7d 0b       	sbc	r23, r29
 91e:	82 0b       	sbc	r24, r18
 920:	93 0b       	sbc	r25, r19
 922:	9e 01       	movw	r18, r28
 924:	eb 01       	movw	r28, r22
 926:	fc 01       	movw	r30, r24
 928:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__muldi3_6>
 92c:	af 91       	pop	r26
 92e:	bf 91       	pop	r27
 930:	2f 91       	pop	r18
 932:	3f 91       	pop	r19
 934:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__muldi3_6>
 938:	be 01       	movw	r22, r28
 93a:	cf 01       	movw	r24, r30
 93c:	f9 01       	movw	r30, r18
 93e:	2f 91       	pop	r18
 940:	3f 91       	pop	r19
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <__ashrdi3>:
 948:	97 fb       	bst	r25, 7
 94a:	10 f8       	bld	r1, 0

0000094c <__lshrdi3>:
 94c:	16 94       	lsr	r1
 94e:	00 08       	sbc	r0, r0
 950:	0f 93       	push	r16
 952:	08 30       	cpi	r16, 0x08	; 8
 954:	98 f0       	brcs	.+38     	; 0x97c <__lshrdi3+0x30>
 956:	08 50       	subi	r16, 0x08	; 8
 958:	23 2f       	mov	r18, r19
 95a:	34 2f       	mov	r19, r20
 95c:	45 2f       	mov	r20, r21
 95e:	56 2f       	mov	r21, r22
 960:	67 2f       	mov	r22, r23
 962:	78 2f       	mov	r23, r24
 964:	89 2f       	mov	r24, r25
 966:	90 2d       	mov	r25, r0
 968:	f4 cf       	rjmp	.-24     	; 0x952 <__lshrdi3+0x6>
 96a:	05 94       	asr	r0
 96c:	97 95       	ror	r25
 96e:	87 95       	ror	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	57 95       	ror	r21
 976:	47 95       	ror	r20
 978:	37 95       	ror	r19
 97a:	27 95       	ror	r18
 97c:	0a 95       	dec	r16
 97e:	aa f7       	brpl	.-22     	; 0x96a <__lshrdi3+0x1e>
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <__umulhisi3>:
 984:	a2 9f       	mul	r26, r18
 986:	b0 01       	movw	r22, r0
 988:	b3 9f       	mul	r27, r19
 98a:	c0 01       	movw	r24, r0
 98c:	a3 9f       	mul	r26, r19
 98e:	70 0d       	add	r23, r0
 990:	81 1d       	adc	r24, r1
 992:	11 24       	eor	r1, r1
 994:	91 1d       	adc	r25, r1
 996:	b2 9f       	mul	r27, r18
 998:	70 0d       	add	r23, r0
 99a:	81 1d       	adc	r24, r1
 99c:	11 24       	eor	r1, r1
 99e:	91 1d       	adc	r25, r1
 9a0:	08 95       	ret

000009a2 <__muldi3_6>:
 9a2:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 9a6:	46 0f       	add	r20, r22
 9a8:	57 1f       	adc	r21, r23
 9aa:	c8 1f       	adc	r28, r24
 9ac:	d9 1f       	adc	r29, r25
 9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__muldi3_6+0x10>
 9b0:	31 96       	adiw	r30, 0x01	; 1
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
