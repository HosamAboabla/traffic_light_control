
traffic_ligth_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173e  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4c  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e43  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000038b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086a  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7f  00000000  00000000  000043d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005151  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  74:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_Initialization>:

#include "LED.h"

void LED_Initialization(LED* led)
{
	DIO_SetPinDirection(led->port , led->pin , DIO_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	fc 01       	movw	r30, r24
  80:	61 81       	ldd	r22, Z+1	; 0x01
  82:	80 81       	ld	r24, Z
  84:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_SetPinDirection>
  88:	08 95       	ret

0000008a <LED_On>:
}
void LED_On(LED* led)
{
	DIO_SetPinValue(led->port , led->pin , DIO_HIGH);
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	fc 01       	movw	r30, r24
  8e:	61 81       	ldd	r22, Z+1	; 0x01
  90:	80 81       	ld	r24, Z
  92:	0e 94 98 01 	call	0x330	; 0x330 <DIO_SetPinValue>
  96:	08 95       	ret

00000098 <LED_Off>:
}
void LED_Off(LED* led)
{
	DIO_SetPinValue(led->port , led->pin , DIO_LOW);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	fc 01       	movw	r30, r24
  9c:	61 81       	ldd	r22, Z+1	; 0x01
  9e:	80 81       	ld	r24, Z
  a0:	0e 94 98 01 	call	0x330	; 0x330 <DIO_SetPinValue>
  a4:	08 95       	ret

000000a6 <traffic_light_init>:
 */ 

#include "traffic_light.h"

void traffic_light_init(traffic_light* tl)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	LED_Initialization(&tl->green);
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_Initialization>
	LED_Initialization(&tl->yellow);
  b0:	ce 01       	movw	r24, r28
  b2:	02 96       	adiw	r24, 0x02	; 2
  b4:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_Initialization>
	LED_Initialization(&tl->red);
  b8:	ce 01       	movw	r24, r28
  ba:	04 96       	adiw	r24, 0x04	; 4
  bc:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_Initialization>
	tl->status = traffic_status_red;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8e 83       	std	Y+6, r24	; 0x06
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <stop>:

void stop(traffic_light* tl)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
	LED_On(&tl->red);
  d0:	04 96       	adiw	r24, 0x04	; 4
  d2:	0e 94 45 00 	call	0x8a	; 0x8a <LED_On>
	LED_Off(&tl->green);
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 4c 00 	call	0x98	; 0x98 <LED_Off>
	LED_Off(&tl->yellow);
  dc:	ce 01       	movw	r24, r28
  de:	02 96       	adiw	r24, 0x02	; 2
  e0:	0e 94 4c 00 	call	0x98	; 0x98 <LED_Off>
	tl->status = traffic_status_red;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	8e 83       	std	Y+6, r24	; 0x06
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <go>:
void go(traffic_light* tl)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	LED_On(&tl->green);
  f4:	0e 94 45 00 	call	0x8a	; 0x8a <LED_On>
	LED_Off(&tl->red);
  f8:	ce 01       	movw	r24, r28
  fa:	04 96       	adiw	r24, 0x04	; 4
  fc:	0e 94 4c 00 	call	0x98	; 0x98 <LED_Off>
	LED_Off(&tl->yellow);
 100:	ce 01       	movw	r24, r28
 102:	02 96       	adiw	r24, 0x02	; 2
 104:	0e 94 4c 00 	call	0x98	; 0x98 <LED_Off>
	tl->status = traffic_status_green;
 108:	1e 82       	std	Y+6, r1	; 0x06
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <ready>:
void ready(traffic_light* tl)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	LED_On(&tl->yellow);
 116:	02 96       	adiw	r24, 0x02	; 2
 118:	0e 94 45 00 	call	0x8a	; 0x8a <LED_On>
	LED_Off(&tl->green);
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 4c 00 	call	0x98	; 0x98 <LED_Off>
	LED_Off(&tl->red);
 122:	ce 01       	movw	r24, r28
 124:	04 96       	adiw	r24, 0x04	; 4
 126:	0e 94 4c 00 	call	0x98	; 0x98 <LED_Off>
	tl->status = traffic_status_yellow;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8e 83       	std	Y+6, r24	; 0x06
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
int main(void)
{
	
	
	LED car_green = { CAR_PORT , CAR_GREEN_PIN };
	LED car_yellow = { CAR_PORT , CAR_YELLOW_PIN};
 134:	81 e0       	ldi	r24, 0x01	; 1
	LED car_red = { CAR_PORT , CAR_RED_PIN};
 136:	92 e0       	ldi	r25, 0x02	; 2
	LED pedestrain_green = { PEDESTRAIN_PORT , PEDESTRAIN_GREEN_PIN };
	LED pedestrain_yellow = { PEDESTRAIN_PORT , PEDESTRAIN_YELLOW_PIN};
	LED pedestrain_red = { PEDESTRAIN_PORT , PEDESTRAIN_RED_PIN};
		
	cars_traffic_light.green = car_green;
 138:	e9 e7       	ldi	r30, 0x79	; 121
 13a:	f0 e0       	ldi	r31, 0x00	; 0
	cars_traffic_light.yellow = car_yellow;
 13c:	12 82       	std	Z+2, r1	; 0x02
 13e:	83 83       	std	Z+3, r24	; 0x03
	cars_traffic_light.green = car_red;
 140:	10 82       	st	Z, r1
 142:	91 83       	std	Z+1, r25	; 0x01
	
	pedestrains_traffic_light.green = pedestrain_green;
 144:	e2 e7       	ldi	r30, 0x72	; 114
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 83       	st	Z, r24
 14a:	11 82       	std	Z+1, r1	; 0x01
	pedestrains_traffic_light.yellow = pedestrain_yellow;
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	83 83       	std	Z+3, r24	; 0x03
	pedestrains_traffic_light.red = pedestrain_red;
 150:	84 83       	std	Z+4, r24	; 0x04
 152:	95 83       	std	Z+5, r25	; 0x05
	
	
		
	traffic_light_init(&cars_traffic_light);
 154:	89 e7       	ldi	r24, 0x79	; 121
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <traffic_light_init>
	traffic_light_init(&pedestrains_traffic_light);
 15c:	82 e7       	ldi	r24, 0x72	; 114
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <traffic_light_init>
	
	Timer0_with_interrupt_initialization(TIMER0_Normal , PIN_Disconnected);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 67 02 	call	0x4ce	; 0x4ce <Timer0_with_interrupt_initialization>
	Timer0_Start(TIMER0_Prescaler_256);
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	0e 94 09 02 	call	0x412	; 0x412 <Timer0_Start>
	Timer0_with_interrupt_set_delay(TIMER0_Normal , 1000 , 0);
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	48 ee       	ldi	r20, 0xE8	; 232
 178:	53 e0       	ldi	r21, 0x03	; 3
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 a5 02 	call	0x54a	; 0x54a <Timer0_with_interrupt_set_delay>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x50>

00000186 <__vector_11>:
}




ISR(TIMER0_OVF_vect){
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	
	static uint32_t cnt=0;

	if(cnt==Number_OVF){		//if counter reach number of overflows
 1a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1b4:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1b8:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <Number_OVF>
 1bc:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <Number_OVF+0x1>
 1c0:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Number_OVF+0x2>
 1c4:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <Number_OVF+0x3>
 1c8:	84 17       	cp	r24, r20
 1ca:	95 07       	cpc	r25, r21
 1cc:	a6 07       	cpc	r26, r22
 1ce:	b7 07       	cpc	r27, r23
 1d0:	11 f5       	brne	.+68     	; 0x216 <__vector_11+0x90>
		// LED_Toggle(&led1);
		TCNT0 = init_val;
 1d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <init_val>
 1d6:	82 bf       	out	0x32, r24	; 50
		if(cars_traffic_light.status == traffic_status_green)
 1d8:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <cars_traffic_light+0x6>
 1dc:	81 11       	cpse	r24, r1
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <__vector_11+0x64>
		{
			ready(&cars_traffic_light);
 1e0:	89 e7       	ldi	r24, 0x79	; 121
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 88 00 	call	0x110	; 0x110 <ready>
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <__vector_11+0x7e>
		}
		else if(cars_traffic_light.status == traffic_status_yellow)
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	29 f4       	brne	.+10     	; 0x1f8 <__vector_11+0x72>
		{
			stop(&cars_traffic_light);
 1ee:	89 e7       	ldi	r24, 0x79	; 121
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 65 00 	call	0xca	; 0xca <stop>
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <__vector_11+0x7e>
		}
		else if(cars_traffic_light.status == traffic_status_red)
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	21 f4       	brne	.+8      	; 0x204 <__vector_11+0x7e>
		{
			go(&cars_traffic_light);
 1fc:	89 e7       	ldi	r24, 0x79	; 121
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 77 00 	call	0xee	; 0xee <go>
		}
		cnt=0;					//make  counter =0
 204:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 208:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 210:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 214:	0b c0       	rjmp	.+22     	; 0x22c <__vector_11+0xa6>
	}
	else
	{
		cnt++;
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	a1 1d       	adc	r26, r1
 21a:	b1 1d       	adc	r27, r1
 21c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 224:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 228:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
		
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <DIO_SetPinDirection>:
#include "DIO.h"

// Prototypes for functions pin only
void DIO_SetPinDirection (Port port , Pin pin , State state)
{
	switch(state)
 24e:	44 23       	and	r20, r20
 250:	19 f0       	breq	.+6      	; 0x258 <DIO_SetPinDirection+0xa>
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	c9 f1       	breq	.+114    	; 0x2c8 <DIO_SetPinDirection+0x7a>
 256:	08 95       	ret
	{
		case DIO_INPUT:
			switch(port)
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	91 f0       	breq	.+36     	; 0x280 <DIO_SetPinDirection+0x32>
 25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_SetPinDirection+0x1a>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	d9 f0       	breq	.+54     	; 0x298 <DIO_SetPinDirection+0x4a>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	29 f1       	breq	.+74     	; 0x2b0 <DIO_SetPinDirection+0x62>
 266:	08 95       	ret
			{
				case DIO_PORTA:
					CLEAR_BIT(DDRA , pin);
 268:	2a b3       	in	r18, 0x1a	; 26
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDirection+0x26>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDirection+0x22>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	8a bb       	out	0x1a, r24	; 26
					break;
 27e:	08 95       	ret
				case DIO_PORTB:
					CLEAR_BIT(DDRB , pin);
 280:	27 b3       	in	r18, 0x17	; 23
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinDirection+0x3e>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinDirection+0x3a>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	87 bb       	out	0x17, r24	; 23
					break;
 296:	08 95       	ret
				case DIO_PORTC:
					CLEAR_BIT(DDRC , pin);
 298:	24 b3       	in	r18, 0x14	; 20
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPinDirection+0x56>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPinDirection+0x52>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	84 bb       	out	0x14, r24	; 20
					break;
 2ae:	08 95       	ret
				case DIO_PORTD:
					CLEAR_BIT(DDRD , pin);
 2b0:	21 b3       	in	r18, 0x11	; 17
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinDirection+0x6e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinDirection+0x6a>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	81 bb       	out	0x11, r24	; 17
					break;
 2c6:	08 95       	ret
					break;
			}
			break;
		
		case DIO_OUTPUT:
			switch(port)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	89 f0       	breq	.+34     	; 0x2ee <DIO_SetPinDirection+0xa0>
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_SetPinDirection+0x8a>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	c9 f0       	breq	.+50     	; 0x304 <DIO_SetPinDirection+0xb6>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	11 f1       	breq	.+68     	; 0x31a <DIO_SetPinDirection+0xcc>
 2d6:	08 95       	ret
			{
				case DIO_PORTA:
					SET_BIT(DDRA , pin);
 2d8:	2a b3       	in	r18, 0x1a	; 26
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPinDirection+0x96>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPinDirection+0x92>
 2e8:	82 2b       	or	r24, r18
 2ea:	8a bb       	out	0x1a, r24	; 26
					break;
 2ec:	08 95       	ret
				case DIO_PORTB:
					SET_BIT(DDRB , pin);
 2ee:	27 b3       	in	r18, 0x17	; 23
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_SetPinDirection+0xac>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_SetPinDirection+0xa8>
 2fe:	82 2b       	or	r24, r18
 300:	87 bb       	out	0x17, r24	; 23
					break;
 302:	08 95       	ret
				case DIO_PORTC:
					SET_BIT(DDRC , pin);
 304:	24 b3       	in	r18, 0x14	; 20
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDirection+0xc2>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDirection+0xbe>
 314:	82 2b       	or	r24, r18
 316:	84 bb       	out	0x14, r24	; 20
					break;
 318:	08 95       	ret
				case DIO_PORTD:
					SET_BIT(DDRD , pin);
 31a:	21 b3       	in	r18, 0x11	; 17
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPinDirection+0xd8>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPinDirection+0xd4>
 32a:	82 2b       	or	r24, r18
 32c:	81 bb       	out	0x11, r24	; 17
 32e:	08 95       	ret

00000330 <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue (Port port , Pin pin , Status status)
{
	switch(status)
 330:	44 23       	and	r20, r20
 332:	19 f0       	breq	.+6      	; 0x33a <DIO_SetPinValue+0xa>
 334:	41 30       	cpi	r20, 0x01	; 1
 336:	c9 f1       	breq	.+114    	; 0x3aa <DIO_SetPinValue+0x7a>
 338:	08 95       	ret
	{
		case DIO_LOW:
			switch(port)
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	91 f0       	breq	.+36     	; 0x362 <DIO_SetPinValue+0x32>
 33e:	28 f0       	brcs	.+10     	; 0x34a <DIO_SetPinValue+0x1a>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	d9 f0       	breq	.+54     	; 0x37a <DIO_SetPinValue+0x4a>
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	29 f1       	breq	.+74     	; 0x392 <DIO_SetPinValue+0x62>
 348:	08 95       	ret
			{
				case DIO_PORTA:
				CLEAR_BIT(PORTA , pin);
 34a:	2b b3       	in	r18, 0x1b	; 27
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_SetPinValue+0x26>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_SetPinValue+0x22>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	8b bb       	out	0x1b, r24	; 27
				break;
 360:	08 95       	ret
				case DIO_PORTB:
				CLEAR_BIT(PORTB , pin);
 362:	28 b3       	in	r18, 0x18	; 24
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPinValue+0x3e>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPinValue+0x3a>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	88 bb       	out	0x18, r24	; 24
				break;
 378:	08 95       	ret
				case DIO_PORTC:
				CLEAR_BIT(PORTC , pin);
 37a:	25 b3       	in	r18, 0x15	; 21
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinValue+0x56>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinValue+0x52>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	85 bb       	out	0x15, r24	; 21
				break;
 390:	08 95       	ret
				case DIO_PORTD:
				CLEAR_BIT(PORTD , pin);
 392:	22 b3       	in	r18, 0x12	; 18
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinValue+0x6e>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinValue+0x6a>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	82 bb       	out	0x12, r24	; 18
				break;
 3a8:	08 95       	ret
				break;
			}
			break;
		
		case DIO_HIGH:
			switch(port)
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	89 f0       	breq	.+34     	; 0x3d0 <DIO_SetPinValue+0xa0>
 3ae:	28 f0       	brcs	.+10     	; 0x3ba <DIO_SetPinValue+0x8a>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	c9 f0       	breq	.+50     	; 0x3e6 <DIO_SetPinValue+0xb6>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	11 f1       	breq	.+68     	; 0x3fc <DIO_SetPinValue+0xcc>
 3b8:	08 95       	ret
			{
				case DIO_PORTA:
					SET_BIT(PORTA , pin);
 3ba:	2b b3       	in	r18, 0x1b	; 27
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_SetPinValue+0x96>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_SetPinValue+0x92>
 3ca:	82 2b       	or	r24, r18
 3cc:	8b bb       	out	0x1b, r24	; 27
					break;
 3ce:	08 95       	ret
				case DIO_PORTB:
					SET_BIT(PORTB , pin);
 3d0:	28 b3       	in	r18, 0x18	; 24
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_SetPinValue+0xac>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_SetPinValue+0xa8>
 3e0:	82 2b       	or	r24, r18
 3e2:	88 bb       	out	0x18, r24	; 24
					break;
 3e4:	08 95       	ret
				case DIO_PORTC:
					SET_BIT(PORTC , pin);
 3e6:	25 b3       	in	r18, 0x15	; 21
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPinValue+0xc2>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPinValue+0xbe>
 3f6:	82 2b       	or	r24, r18
 3f8:	85 bb       	out	0x15, r24	; 21
					break;
 3fa:	08 95       	ret
				case DIO_PORTD:
					SET_BIT(PORTD , pin);
 3fc:	22 b3       	in	r18, 0x12	; 18
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	82 bb       	out	0x12, r24	; 18
 410:	08 95       	ret

00000412 <Timer0_Start>:
			while(GET_BIT(TIFR , OCF0) != 1 );
			counter++;
			SET_BIT(TIFR , OCF0);
		}
	}
}
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	61 f1       	breq	.+88     	; 0x46e <Timer0_Start+0x5c>
 416:	28 f4       	brcc	.+10     	; 0x422 <Timer0_Start+0x10>
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	49 f0       	breq	.+18     	; 0x42e <Timer0_Start+0x1c>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	b9 f0       	breq	.+46     	; 0x44e <Timer0_Start+0x3c>
 420:	08 95       	ret
 422:	84 30       	cpi	r24, 0x04	; 4
 424:	a1 f1       	breq	.+104    	; 0x48e <Timer0_Start+0x7c>
 426:	85 30       	cpi	r24, 0x05	; 5
 428:	09 f4       	brne	.+2      	; 0x42c <Timer0_Start+0x1a>
 42a:	41 c0       	rjmp	.+130    	; 0x4ae <Timer0_Start+0x9c>
 42c:	08 95       	ret
 42e:	83 b7       	in	r24, 0x33	; 51
 430:	8b 7f       	andi	r24, 0xFB	; 251
 432:	83 bf       	out	0x33, r24	; 51
 434:	83 b7       	in	r24, 0x33	; 51
 436:	8d 7f       	andi	r24, 0xFD	; 253
 438:	83 bf       	out	0x33, r24	; 51
 43a:	83 b7       	in	r24, 0x33	; 51
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	83 bf       	out	0x33, r24	; 51
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Global_Prescaler+0x1>
 448:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Global_Prescaler>
 44c:	08 95       	ret
 44e:	83 b7       	in	r24, 0x33	; 51
 450:	8b 7f       	andi	r24, 0xFB	; 251
 452:	83 bf       	out	0x33, r24	; 51
 454:	83 b7       	in	r24, 0x33	; 51
 456:	82 60       	ori	r24, 0x02	; 2
 458:	83 bf       	out	0x33, r24	; 51
 45a:	83 b7       	in	r24, 0x33	; 51
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	83 bf       	out	0x33, r24	; 51
 460:	88 e0       	ldi	r24, 0x08	; 8
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Global_Prescaler+0x1>
 468:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Global_Prescaler>
 46c:	08 95       	ret
 46e:	83 b7       	in	r24, 0x33	; 51
 470:	8b 7f       	andi	r24, 0xFB	; 251
 472:	83 bf       	out	0x33, r24	; 51
 474:	83 b7       	in	r24, 0x33	; 51
 476:	82 60       	ori	r24, 0x02	; 2
 478:	83 bf       	out	0x33, r24	; 51
 47a:	83 b7       	in	r24, 0x33	; 51
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	83 bf       	out	0x33, r24	; 51
 480:	80 e4       	ldi	r24, 0x40	; 64
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Global_Prescaler+0x1>
 488:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Global_Prescaler>
 48c:	08 95       	ret
 48e:	83 b7       	in	r24, 0x33	; 51
 490:	84 60       	ori	r24, 0x04	; 4
 492:	83 bf       	out	0x33, r24	; 51
 494:	83 b7       	in	r24, 0x33	; 51
 496:	8d 7f       	andi	r24, 0xFD	; 253
 498:	83 bf       	out	0x33, r24	; 51
 49a:	83 b7       	in	r24, 0x33	; 51
 49c:	8e 7f       	andi	r24, 0xFE	; 254
 49e:	83 bf       	out	0x33, r24	; 51
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Global_Prescaler+0x1>
 4a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Global_Prescaler>
 4ac:	08 95       	ret
 4ae:	83 b7       	in	r24, 0x33	; 51
 4b0:	84 60       	ori	r24, 0x04	; 4
 4b2:	83 bf       	out	0x33, r24	; 51
 4b4:	83 b7       	in	r24, 0x33	; 51
 4b6:	8d 7f       	andi	r24, 0xFD	; 253
 4b8:	83 bf       	out	0x33, r24	; 51
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	81 60       	ori	r24, 0x01	; 1
 4be:	83 bf       	out	0x33, r24	; 51
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	94 e0       	ldi	r25, 0x04	; 4
 4c4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Global_Prescaler+0x1>
 4c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Global_Prescaler>
 4cc:	08 95       	ret

000004ce <Timer0_with_interrupt_initialization>:
uint32_t Number_CTC = 0;
uint32_t init_val = 0;

void Timer0_with_interrupt_initialization(TIMER0_Mode mode , TIMER0_Pin_Mode pin_mode)
{
	cli();
 4ce:	f8 94       	cli
	switch(mode)
 4d0:	88 23       	and	r24, r24
 4d2:	19 f0       	breq	.+6      	; 0x4da <Timer0_with_interrupt_initialization+0xc>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	59 f0       	breq	.+22     	; 0x4ee <Timer0_with_interrupt_initialization+0x20>
 4d8:	13 c0       	rjmp	.+38     	; 0x500 <Timer0_with_interrupt_initialization+0x32>
	{
		case TIMER0_Normal:
			CLEAR_BIT(TCCR0 , WGM01); CLEAR_BIT(TCCR0 , WGM00);
 4da:	83 b7       	in	r24, 0x33	; 51
 4dc:	87 7f       	andi	r24, 0xF7	; 247
 4de:	83 bf       	out	0x33, r24	; 51
 4e0:	83 b7       	in	r24, 0x33	; 51
 4e2:	8f 7b       	andi	r24, 0xBF	; 191
 4e4:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TIMSK , TOIE0);
 4e6:	89 b7       	in	r24, 0x39	; 57
 4e8:	81 60       	ori	r24, 0x01	; 1
 4ea:	89 bf       	out	0x39, r24	; 57
			break;
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <Timer0_with_interrupt_initialization+0x32>
		case TIMER0_CTC:
			SET_BIT(TCCR0 , WGM01); CLEAR_BIT(TCCR0 , WGM00);
 4ee:	83 b7       	in	r24, 0x33	; 51
 4f0:	88 60       	ori	r24, 0x08	; 8
 4f2:	83 bf       	out	0x33, r24	; 51
 4f4:	83 b7       	in	r24, 0x33	; 51
 4f6:	8f 7b       	andi	r24, 0xBF	; 191
 4f8:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TIMSK , OCIE0);
 4fa:	89 b7       	in	r24, 0x39	; 57
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	89 bf       	out	0x39, r24	; 57
			break;
	}
	
	switch(pin_mode)
 500:	61 30       	cpi	r22, 0x01	; 1
 502:	69 f0       	breq	.+26     	; 0x51e <Timer0_with_interrupt_initialization+0x50>
 504:	28 f0       	brcs	.+10     	; 0x510 <Timer0_with_interrupt_initialization+0x42>
 506:	62 30       	cpi	r22, 0x02	; 2
 508:	89 f0       	breq	.+34     	; 0x52c <Timer0_with_interrupt_initialization+0x5e>
 50a:	63 30       	cpi	r22, 0x03	; 3
 50c:	b1 f0       	breq	.+44     	; 0x53a <Timer0_with_interrupt_initialization+0x6c>
 50e:	1b c0       	rjmp	.+54     	; 0x546 <Timer0_with_interrupt_initialization+0x78>
	{
		case PIN_Disconnected:
			CLEAR_BIT(TCCR0 , COM01); CLEAR_BIT(TCCR0 , COM00);
 510:	83 b7       	in	r24, 0x33	; 51
 512:	8f 7d       	andi	r24, 0xDF	; 223
 514:	83 bf       	out	0x33, r24	; 51
 516:	83 b7       	in	r24, 0x33	; 51
 518:	8f 7e       	andi	r24, 0xEF	; 239
 51a:	83 bf       	out	0x33, r24	; 51
			break;
 51c:	14 c0       	rjmp	.+40     	; 0x546 <Timer0_with_interrupt_initialization+0x78>
		case PIN_Toggle:
			CLEAR_BIT(TCCR0 , COM01); SET_BIT(TCCR0 , COM00);
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	8f 7d       	andi	r24, 0xDF	; 223
 522:	83 bf       	out	0x33, r24	; 51
 524:	83 b7       	in	r24, 0x33	; 51
 526:	80 61       	ori	r24, 0x10	; 16
 528:	83 bf       	out	0x33, r24	; 51
			break;
 52a:	0d c0       	rjmp	.+26     	; 0x546 <Timer0_with_interrupt_initialization+0x78>
		case PIN_Clear:
			SET_BIT(TCCR0 , COM01); CLEAR_BIT(TCCR0 , COM00);
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	80 62       	ori	r24, 0x20	; 32
 530:	83 bf       	out	0x33, r24	; 51
 532:	83 b7       	in	r24, 0x33	; 51
 534:	8f 7e       	andi	r24, 0xEF	; 239
 536:	83 bf       	out	0x33, r24	; 51
			break;
 538:	06 c0       	rjmp	.+12     	; 0x546 <Timer0_with_interrupt_initialization+0x78>
		case PIN_Set:
			SET_BIT(TCCR0 , COM01); SET_BIT(TCCR0 , COM00);
 53a:	83 b7       	in	r24, 0x33	; 51
 53c:	80 62       	ori	r24, 0x20	; 32
 53e:	83 bf       	out	0x33, r24	; 51
 540:	83 b7       	in	r24, 0x33	; 51
 542:	80 61       	ori	r24, 0x10	; 16
 544:	83 bf       	out	0x33, r24	; 51
			break;
		default:
			break;
	}
	sei();
 546:	78 94       	sei
 548:	08 95       	ret

0000054a <Timer0_with_interrupt_set_delay>:




void Timer0_with_interrupt_set_delay(TIMER0_Mode mode , uint32_t delay , uint16_t top)
{
 54a:	cf 92       	push	r12
 54c:	df 92       	push	r13
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
	if(mode == TIMER0_Normal)
 552:	81 11       	cpse	r24, r1
 554:	39 c0       	rjmp	.+114    	; 0x5c8 <Timer0_with_interrupt_set_delay+0x7e>
	{
		uint32_t tick = (1 * Global_Prescaler) / Frequency;
 556:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <Global_Prescaler>
 55a:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <Global_Prescaler+0x1>
 55e:	d6 94       	lsr	r13
 560:	c7 94       	ror	r12
 562:	d6 94       	lsr	r13
 564:	c7 94       	ror	r12
 566:	d6 94       	lsr	r13
 568:	c7 94       	ror	r12
 56a:	d6 94       	lsr	r13
 56c:	c7 94       	ror	r12
 56e:	e1 2c       	mov	r14, r1
 570:	f1 2c       	mov	r15, r1
		uint32_t Count = (delay * 1000) / tick;
 572:	a8 ee       	ldi	r26, 0xE8	; 232
 574:	b3 e0       	ldi	r27, 0x03	; 3
 576:	9a 01       	movw	r18, r20
 578:	ab 01       	movw	r20, r22
 57a:	0e 94 3d 03 	call	0x67a	; 0x67a <__muluhisi3>
 57e:	a7 01       	movw	r20, r14
 580:	96 01       	movw	r18, r12
 582:	0e 94 1b 03 	call	0x636	; 0x636 <__udivmodsi4>
		Number_OVF = Count / Bits;
 586:	bb 27       	eor	r27, r27
 588:	a5 2f       	mov	r26, r21
 58a:	94 2f       	mov	r25, r20
 58c:	83 2f       	mov	r24, r19
		Number_OVF++;
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	a1 1d       	adc	r26, r1
 592:	b1 1d       	adc	r27, r1
 594:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Number_OVF>
 598:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Number_OVF+0x1>
 59c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <Number_OVF+0x2>
 5a0:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <Number_OVF+0x3>
		init_val = Bits - (Count % Bits);
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	a0 e0       	ldi	r26, 0x00	; 0
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	82 1b       	sub	r24, r18
 5ae:	91 09       	sbc	r25, r1
 5b0:	a1 09       	sbc	r26, r1
 5b2:	b1 09       	sbc	r27, r1
 5b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <init_val>
 5b8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <init_val+0x1>
 5bc:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <init_val+0x2>
 5c0:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <init_val+0x3>
		TCNT0 = init_val;
 5c4:	82 bf       	out	0x32, r24	; 50
 5c6:	32 c0       	rjmp	.+100    	; 0x62c <Timer0_with_interrupt_set_delay+0xe2>
	}
	else if(mode == TIMER0_CTC)
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	81 f5       	brne	.+96     	; 0x62c <Timer0_with_interrupt_set_delay+0xe2>
	{
		OCR0 = top;
 5cc:	2c bf       	out	0x3c, r18	; 60
		uint32_t tick = (1 * Global_Prescaler) / Frequency;
 5ce:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <Global_Prescaler>
 5d2:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <Global_Prescaler+0x1>
 5d6:	d6 94       	lsr	r13
 5d8:	c7 94       	ror	r12
 5da:	d6 94       	lsr	r13
 5dc:	c7 94       	ror	r12
 5de:	d6 94       	lsr	r13
 5e0:	c7 94       	ror	r12
 5e2:	d6 94       	lsr	r13
 5e4:	c7 94       	ror	r12
 5e6:	e1 2c       	mov	r14, r1
 5e8:	f1 2c       	mov	r15, r1
		uint32_t Count = (delay * 1000) / tick;
 5ea:	a8 ee       	ldi	r26, 0xE8	; 232
 5ec:	b3 e0       	ldi	r27, 0x03	; 3
 5ee:	9a 01       	movw	r18, r20
 5f0:	ab 01       	movw	r20, r22
 5f2:	0e 94 3d 03 	call	0x67a	; 0x67a <__muluhisi3>
 5f6:	a7 01       	movw	r20, r14
 5f8:	96 01       	movw	r18, r12
 5fa:	0e 94 1b 03 	call	0x636	; 0x636 <__udivmodsi4>
		Number_CTC = Count / OCR0;
 5fe:	cc b6       	in	r12, 0x3c	; 60
 600:	d1 2c       	mov	r13, r1
 602:	e1 2c       	mov	r14, r1
 604:	f1 2c       	mov	r15, r1
 606:	ca 01       	movw	r24, r20
 608:	b9 01       	movw	r22, r18
 60a:	a7 01       	movw	r20, r14
 60c:	96 01       	movw	r18, r12
 60e:	0e 94 1b 03 	call	0x636	; 0x636 <__udivmodsi4>
		Number_CTC++;
 612:	da 01       	movw	r26, r20
 614:	c9 01       	movw	r24, r18
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	a1 1d       	adc	r26, r1
 61a:	b1 1d       	adc	r27, r1
 61c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Number_CTC>
 620:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Number_CTC+0x1>
 624:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <Number_CTC+0x2>
 628:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <Number_CTC+0x3>
	}
}
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	df 90       	pop	r13
 632:	cf 90       	pop	r12
 634:	08 95       	ret

00000636 <__udivmodsi4>:
 636:	a1 e2       	ldi	r26, 0x21	; 33
 638:	1a 2e       	mov	r1, r26
 63a:	aa 1b       	sub	r26, r26
 63c:	bb 1b       	sub	r27, r27
 63e:	fd 01       	movw	r30, r26
 640:	0d c0       	rjmp	.+26     	; 0x65c <__udivmodsi4_ep>

00000642 <__udivmodsi4_loop>:
 642:	aa 1f       	adc	r26, r26
 644:	bb 1f       	adc	r27, r27
 646:	ee 1f       	adc	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	a2 17       	cp	r26, r18
 64c:	b3 07       	cpc	r27, r19
 64e:	e4 07       	cpc	r30, r20
 650:	f5 07       	cpc	r31, r21
 652:	20 f0       	brcs	.+8      	; 0x65c <__udivmodsi4_ep>
 654:	a2 1b       	sub	r26, r18
 656:	b3 0b       	sbc	r27, r19
 658:	e4 0b       	sbc	r30, r20
 65a:	f5 0b       	sbc	r31, r21

0000065c <__udivmodsi4_ep>:
 65c:	66 1f       	adc	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	1a 94       	dec	r1
 666:	69 f7       	brne	.-38     	; 0x642 <__udivmodsi4_loop>
 668:	60 95       	com	r22
 66a:	70 95       	com	r23
 66c:	80 95       	com	r24
 66e:	90 95       	com	r25
 670:	9b 01       	movw	r18, r22
 672:	ac 01       	movw	r20, r24
 674:	bd 01       	movw	r22, r26
 676:	cf 01       	movw	r24, r30
 678:	08 95       	ret

0000067a <__muluhisi3>:
 67a:	0e 94 48 03 	call	0x690	; 0x690 <__umulhisi3>
 67e:	a5 9f       	mul	r26, r21
 680:	90 0d       	add	r25, r0
 682:	b4 9f       	mul	r27, r20
 684:	90 0d       	add	r25, r0
 686:	a4 9f       	mul	r26, r20
 688:	80 0d       	add	r24, r0
 68a:	91 1d       	adc	r25, r1
 68c:	11 24       	eor	r1, r1
 68e:	08 95       	ret

00000690 <__umulhisi3>:
 690:	a2 9f       	mul	r26, r18
 692:	b0 01       	movw	r22, r0
 694:	b3 9f       	mul	r27, r19
 696:	c0 01       	movw	r24, r0
 698:	a3 9f       	mul	r26, r19
 69a:	70 0d       	add	r23, r0
 69c:	81 1d       	adc	r24, r1
 69e:	11 24       	eor	r1, r1
 6a0:	91 1d       	adc	r25, r1
 6a2:	b2 9f       	mul	r27, r18
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	08 95       	ret

000006ae <_exit>:
 6ae:	f8 94       	cli

000006b0 <__stop_program>:
 6b0:	ff cf       	rjmp	.-2      	; 0x6b0 <__stop_program>
